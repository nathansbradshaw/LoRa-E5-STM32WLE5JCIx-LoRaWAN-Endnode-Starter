ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32_lpm_if.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.PWR_EnterOffMode,"ax",%progbits
  18              		.align	1
  19              		.global	PWR_EnterOffMode
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	PWR_EnterOffMode:
  25              	.LFB991:
  26              		.file 1 "Core/Src/stm32_lpm_if.c"
   1:Core/Src/stm32_lpm_if.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32_lpm_if.c **** /**
   3:Core/Src/stm32_lpm_if.c ****   ******************************************************************************
   4:Core/Src/stm32_lpm_if.c ****   * @file    stm32_lpm_if.c
   5:Core/Src/stm32_lpm_if.c ****   * @author  MCD Application Team
   6:Core/Src/stm32_lpm_if.c ****   * @brief   Low layer function to enter/exit low power modes (stop, sleep)
   7:Core/Src/stm32_lpm_if.c ****   ******************************************************************************
   8:Core/Src/stm32_lpm_if.c ****   * @attention
   9:Core/Src/stm32_lpm_if.c ****   *
  10:Core/Src/stm32_lpm_if.c ****   * Copyright (c) 2022 STMicroelectronics.
  11:Core/Src/stm32_lpm_if.c ****   * All rights reserved.
  12:Core/Src/stm32_lpm_if.c ****   *
  13:Core/Src/stm32_lpm_if.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/stm32_lpm_if.c ****   * in the root directory of this software component.
  15:Core/Src/stm32_lpm_if.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/stm32_lpm_if.c ****   *
  17:Core/Src/stm32_lpm_if.c ****   ******************************************************************************
  18:Core/Src/stm32_lpm_if.c ****   */
  19:Core/Src/stm32_lpm_if.c **** /* USER CODE END Header */
  20:Core/Src/stm32_lpm_if.c **** 
  21:Core/Src/stm32_lpm_if.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32_lpm_if.c **** #include "platform.h"
  23:Core/Src/stm32_lpm_if.c **** #include "stm32_lpm.h"
  24:Core/Src/stm32_lpm_if.c **** #include "stm32_lpm_if.h"
  25:Core/Src/stm32_lpm_if.c **** #include "usart_if.h"
  26:Core/Src/stm32_lpm_if.c **** 
  27:Core/Src/stm32_lpm_if.c **** /* USER CODE BEGIN Includes */
  28:Core/Src/stm32_lpm_if.c **** 
  29:Core/Src/stm32_lpm_if.c **** /* USER CODE END Includes */
  30:Core/Src/stm32_lpm_if.c **** 
  31:Core/Src/stm32_lpm_if.c **** /* External variables ---------------------------------------------------------*/
  32:Core/Src/stm32_lpm_if.c **** /* USER CODE BEGIN EV */
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 2


  33:Core/Src/stm32_lpm_if.c **** 
  34:Core/Src/stm32_lpm_if.c **** /* USER CODE END EV */
  35:Core/Src/stm32_lpm_if.c **** 
  36:Core/Src/stm32_lpm_if.c **** /* Private typedef -----------------------------------------------------------*/
  37:Core/Src/stm32_lpm_if.c **** /**
  38:Core/Src/stm32_lpm_if.c ****   * @brief Power driver callbacks handler
  39:Core/Src/stm32_lpm_if.c ****   */
  40:Core/Src/stm32_lpm_if.c **** const struct UTIL_LPM_Driver_s UTIL_PowerDriver =
  41:Core/Src/stm32_lpm_if.c **** {
  42:Core/Src/stm32_lpm_if.c ****   PWR_EnterSleepMode,
  43:Core/Src/stm32_lpm_if.c ****   PWR_ExitSleepMode,
  44:Core/Src/stm32_lpm_if.c **** 
  45:Core/Src/stm32_lpm_if.c ****   PWR_EnterStopMode,
  46:Core/Src/stm32_lpm_if.c ****   PWR_ExitStopMode,
  47:Core/Src/stm32_lpm_if.c **** 
  48:Core/Src/stm32_lpm_if.c ****   PWR_EnterOffMode,
  49:Core/Src/stm32_lpm_if.c ****   PWR_ExitOffMode,
  50:Core/Src/stm32_lpm_if.c **** };
  51:Core/Src/stm32_lpm_if.c **** 
  52:Core/Src/stm32_lpm_if.c **** /* USER CODE BEGIN PTD */
  53:Core/Src/stm32_lpm_if.c **** 
  54:Core/Src/stm32_lpm_if.c **** /* USER CODE END PTD */
  55:Core/Src/stm32_lpm_if.c **** 
  56:Core/Src/stm32_lpm_if.c **** /* Private define ------------------------------------------------------------*/
  57:Core/Src/stm32_lpm_if.c **** /* USER CODE BEGIN PD */
  58:Core/Src/stm32_lpm_if.c **** 
  59:Core/Src/stm32_lpm_if.c **** /* USER CODE END PD */
  60:Core/Src/stm32_lpm_if.c **** 
  61:Core/Src/stm32_lpm_if.c **** /* Private macro -------------------------------------------------------------*/
  62:Core/Src/stm32_lpm_if.c **** /* USER CODE BEGIN PM */
  63:Core/Src/stm32_lpm_if.c **** 
  64:Core/Src/stm32_lpm_if.c **** /* USER CODE END PM */
  65:Core/Src/stm32_lpm_if.c **** 
  66:Core/Src/stm32_lpm_if.c **** /* Private variables ---------------------------------------------------------*/
  67:Core/Src/stm32_lpm_if.c **** /* USER CODE BEGIN PV */
  68:Core/Src/stm32_lpm_if.c **** 
  69:Core/Src/stm32_lpm_if.c **** /* USER CODE END PV */
  70:Core/Src/stm32_lpm_if.c **** 
  71:Core/Src/stm32_lpm_if.c **** /* Private function prototypes -----------------------------------------------*/
  72:Core/Src/stm32_lpm_if.c **** /* USER CODE BEGIN PFP */
  73:Core/Src/stm32_lpm_if.c **** 
  74:Core/Src/stm32_lpm_if.c **** /* USER CODE END PFP */
  75:Core/Src/stm32_lpm_if.c **** 
  76:Core/Src/stm32_lpm_if.c **** /* Exported functions --------------------------------------------------------*/
  77:Core/Src/stm32_lpm_if.c **** 
  78:Core/Src/stm32_lpm_if.c **** void PWR_EnterOffMode(void)
  79:Core/Src/stm32_lpm_if.c **** {
  27              		.loc 1 79 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  80:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterOffMode_1 */
  81:Core/Src/stm32_lpm_if.c **** 
  82:Core/Src/stm32_lpm_if.c ****   /* USER CODE END EnterOffMode_1 */
  83:Core/Src/stm32_lpm_if.c **** }
  32              		.loc 1 83 1 view .LVU1
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 3


  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE991:
  37              		.section	.text.PWR_ExitOffMode,"ax",%progbits
  38              		.align	1
  39              		.global	PWR_ExitOffMode
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  44              	PWR_ExitOffMode:
  45              	.LFB992:
  84:Core/Src/stm32_lpm_if.c **** 
  85:Core/Src/stm32_lpm_if.c **** void PWR_ExitOffMode(void)
  86:Core/Src/stm32_lpm_if.c **** {
  46              		.loc 1 86 1 view -0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  87:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN ExitOffMode_1 */
  88:Core/Src/stm32_lpm_if.c **** 
  89:Core/Src/stm32_lpm_if.c ****   /* USER CODE END ExitOffMode_1 */
  90:Core/Src/stm32_lpm_if.c **** }
  51              		.loc 1 90 1 view .LVU3
  52 0000 7047     		bx	lr
  53              		.cfi_endproc
  54              	.LFE992:
  56              		.section	.text.PWR_EnterStopMode,"ax",%progbits
  57              		.align	1
  58              		.global	PWR_EnterStopMode
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  63              	PWR_EnterStopMode:
  64              	.LFB993:
  91:Core/Src/stm32_lpm_if.c **** 
  92:Core/Src/stm32_lpm_if.c **** void PWR_EnterStopMode(void)
  93:Core/Src/stm32_lpm_if.c **** {
  65              		.loc 1 93 1 view -0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69 0000 08B5     		push	{r3, lr}
  70              	.LCFI0:
  71              		.cfi_def_cfa_offset 8
  72              		.cfi_offset 3, -8
  73              		.cfi_offset 14, -4
  94:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterStopMode_1 */
  95:Core/Src/stm32_lpm_if.c **** 
  96:Core/Src/stm32_lpm_if.c ****   /* USER CODE END EnterStopMode_1 */
  97:Core/Src/stm32_lpm_if.c ****   HAL_SuspendTick();
  74              		.loc 1 97 3 view .LVU5
  75 0002 FFF7FEFF 		bl	HAL_SuspendTick
  76              	.LVL0:
  98:Core/Src/stm32_lpm_if.c ****   /* Clear Status Flag before entering STOP/STANDBY Mode */
  99:Core/Src/stm32_lpm_if.c ****   LL_PWR_ClearFlag_C1STOP_C1STB();
  77              		.loc 1 99 3 view .LVU6
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 4


  78              	.LBB4:
  79              	.LBI4:
  80              		.file 2 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h"
   1:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
   2:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   ******************************************************************************
   3:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @file    stm32wlxx_ll_pwr.h
   4:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @author  MCD Application Team
   5:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief   Header file of PWR LL module.
   6:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   ******************************************************************************
   7:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @attention
   8:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *
   9:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *
  12:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *
  17:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   ******************************************************************************
  18:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  19:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  20:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #ifndef __STM32WLxx_LL_PWR_H
  22:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define __STM32WLxx_LL_PWR_H
  23:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  24:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #ifdef __cplusplus
  25:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** extern "C" {
  26:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #endif
  27:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  28:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #include "stm32wlxx.h"
  30:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  31:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @addtogroup STM32WLxx_LL_Driver
  32:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
  33:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  34:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  35:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #if defined(PWR)
  36:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  37:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL PWR
  38:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
  39:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  40:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  41:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  44:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Private constants ---------------------------------------------------------*/
  45:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_Private_Constants PWR Private Constants
  46:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
  47:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  48:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define PWR_FLASH_POWER_MODE_UNLOCK_CODE  (0x0000C1B0UL)
  49:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
  50:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
  51:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  52:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  53:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Private macros ------------------------------------------------------------*/
  54:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 5


  55:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Exported types ------------------------------------------------------------*/
  56:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Exported constants --------------------------------------------------------*/
  57:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_Exported_Constants PWR Exported Constants
  58:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
  59:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  60:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  61:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_CLEAR_FLAG Clear Flags Defines
  62:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief    Flags defines which can be used with LL_PWR_WriteReg function
  63:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
  64:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  65:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SCR_CWUF                    PWR_SCR_CWUF
  66:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SCR_CWUF3                   PWR_SCR_CWUF3
  67:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SCR_CWUF2                   PWR_SCR_CWUF2
  68:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SCR_CWUF1                   PWR_SCR_CWUF1
  69:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SCR_CWPVDF                  PWR_SCR_CWPVDF
  70:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SCR_CWRFBUSYF               PWR_SCR_CWRFBUSYF
  71:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SCR_CC2HF                   PWR_SCR_CC2HF
  72:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C2CSSF               PWR_EXTSCR_C2CSSF
  73:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C1CSSF               PWR_EXTSCR_C1CSSF
  74:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
  75:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
  76:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  77:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  78:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_GET_FLAG Get Flags Defines
  79:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief    Flags defines which can be used with LL_PWR_ReadReg function
  80:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
  81:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  82:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR1_WUFI                    PWR_SR1_WUFI
  83:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR1_WUF3                    PWR_SR1_WUF3
  84:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR1_WUF2                    PWR_SR1_WUF2
  85:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR1_WUF1                    PWR_SR1_WUF1
  86:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR1_WPVDF                   PWR_SR1_WPVDF
  87:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  88:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_LDORDY                  PWR_SR2_LDORDY
  89:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_PVMO3                   PWR_SR2_PVMO3
  90:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_PVDO                    PWR_SR2_PVDO
  91:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_RFEOL                   PWR_SR2_RFEOLF
  92:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_VOSF                    PWR_SR2_VOSF
  93:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_REGLPF                  PWR_SR2_REGLPF
  94:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_REGLPS                  PWR_SR2_REGLPS
  95:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_REGMRS                  PWR_SR2_REGMRS
  96:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  97:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* SMPS flags */
  98:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_SMPSRDY                 PWR_SR2_SMPSRDY
  99:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 100:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Radio flags */
 101:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR1_WRFBUSY                 PWR_SR1_WRFBUSYF   /* Radio busy flag for wake-up and in
 102:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_RFBUSYS                 PWR_SR2_RFBUSYS    /* Radio busy signal flag (current st
 103:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_RFBUSYMS                PWR_SR2_RFBUSYMS   /* Radio busy masked signal flag (cur
 104:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 105:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Multicore flags */
 106:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C1SBF                PWR_EXTSCR_C1SBF    /* System Standby flag for CPU1 */
 107:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C1STOP2F             PWR_EXTSCR_C1STOP2F /* System Stop 2 flag for CPU1 */
 108:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C1STOPF              PWR_EXTSCR_C1STOPF  /* System Stop 0 or stop 1 flag for 
 109:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C1DS                 PWR_EXTSCR_C1DS     /* CPU1 deepsleep mode */
 110:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #if defined(DUAL_CORE)
 111:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C2SBF                PWR_EXTSCR_C2SBF    /* System Standby flag for CPU2 */
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 6


 112:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C2STOP2F             PWR_EXTSCR_C2STOP2F /* System Stop 2 flag for CPU2 */
 113:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C2STOPF              PWR_EXTSCR_C2STOPF  /* System Stop 0 or stop 1 flag for 
 114:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C2DS                 PWR_EXTSCR_C2DS     /* CPU2 deepsleep mode */
 115:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_C2BOOTS                 PWR_SR2_C2BOOTS     /* CPU2 boot request source informat
 116:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR1_C2HF                    PWR_SR1_C2HF        /* CPU2 hold interrupt flag */
 117:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #endif
 118:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 119:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 120:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 121:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 122:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_REGU_VOLTAGE REGU VOLTAGE
 123:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 124:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 125:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_REGU_VOLTAGE_SCALE1         (PWR_CR1_VOS_0) /* Regulator voltage output range 1 mode
 126:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_REGU_VOLTAGE_SCALE2         (PWR_CR1_VOS_1) /* Regulator voltage output range 2 mode
 127:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 128:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 129:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 130:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 131:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_MODE_PWR MODE PWR
 132:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 133:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 134:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_MODE_STOP0                  (0x000000000UL)
 135:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_MODE_STOP1                  (PWR_CR1_LPMS_0)
 136:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_MODE_STOP2                  (PWR_CR1_LPMS_1)
 137:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_MODE_STANDBY                (PWR_CR1_LPMS_1 | PWR_CR1_LPMS_0)
 138:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_MODE_SHUTDOWN               (PWR_CR1_LPMS_2 | PWR_CR1_LPMS_1 | PWR_CR1_LPMS_0)
 139:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 140:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 141:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 142:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 143:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_FLASH_LPRUN_POWER_DOWN_MODE Flash power-down mode during low-power run mode
 144:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 145:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 146:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_FLASH_LPRUN_MODE_IDLE       (0x000000000UL)
 147:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_FLASH_LPRUN_MODE_POWER_DOWN (PWR_CR1_FPDR)
 148:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 149:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 150:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 151:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 152:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_FLASH_SLEEP_POWER_DOWN_MODE Flash power-down mode during sleep mode
 153:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 154:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 155:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_FLASH_SLEEP_MODE_IDLE       (0x000000000UL)
 156:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_FLASH_SLEEP_MODE_POWER_DOWN (PWR_CR1_FPDS)
 157:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 158:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 159:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 160:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 161:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_PVM Peripheral voltage monitoring
 162:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 163:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 164:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVM_VDDA_1_62V              (PWR_CR2_PVME3)     /* Monitoring VDDA vs. 1.62V  */
 165:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 166:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 167:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 168:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 7


 169:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_PVDLEVEL PVDLEVEL
 170:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 171:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 172:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_0                  (0x00000000UL)                                  /* VPVD0
 173:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_1                  (PWR_CR2_PLS_0)                                 /* VPVD1
 174:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_2                  (PWR_CR2_PLS_1)                                 /* VPVD2
 175:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_3                  (PWR_CR2_PLS_1 | PWR_CR2_PLS_0)                 /* VPVD3
 176:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_4                  (PWR_CR2_PLS_2)                                 /* VPVD4
 177:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_5                  (PWR_CR2_PLS_2 | PWR_CR2_PLS_0)                 /* VPVD5
 178:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_6                  (PWR_CR2_PLS_2 | PWR_CR2_PLS_1)                 /* VPVD6
 179:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_7                  (PWR_CR2_PLS_2 | PWR_CR2_PLS_1 | PWR_CR2_PLS_0) /* Exter
 180:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 181:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 182:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 183:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 184:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_EOL_OPERATING_MODES Monitoring of supply voltage for radio operating level 
 185:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 186:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 187:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_RADIO_EOL_DISABLE                  (0x00000000UL)    /*!< Monitoring of supply volta
 188:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_RADIO_EOL_ENABLE                   (PWR_CR5_RFEOLEN) /*!< Monitoring of supply volta
 189:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 190:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 191:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 192:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 193:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_WAKEUP WAKEUP
 194:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 195:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 196:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_WAKEUP_PIN1                 (PWR_CR3_EWUP1)
 197:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_WAKEUP_PIN2                 (PWR_CR3_EWUP2)
 198:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_WAKEUP_PIN3                 (PWR_CR3_EWUP3)
 199:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 200:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 201:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 202:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 203:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_BATT_CHARG_RESISTOR BATT CHARG RESISTOR
 204:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 205:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 206:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_BATT_CHARG_RESISTOR_5K      (0x00000000UL)
 207:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_BATT_CHARGRESISTOR_1_5K     (PWR_CR4_VBRS)
 208:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 209:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 210:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 211:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 212:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_GPIO GPIO
 213:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 214:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 215:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_A                      ((uint32_t)(&(PWR->PUCRA)))
 216:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_B                      ((uint32_t)(&(PWR->PUCRB)))
 217:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_C                      ((uint32_t)(&(PWR->PUCRC)))
 218:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_H                      ((uint32_t)(&(PWR->PUCRH)))
 219:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 220:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 221:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 222:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 223:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_GPIO_BIT GPIO BIT
 224:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 225:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 8


 226:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Note: LL_PWR_GPIO_BIT_x defined from port B because all pins are available */
 227:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /*       for PWR pull-up and pull-down.                                       */
 228:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_0                  (PWR_PUCRB_PB0)
 229:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_1                  (PWR_PUCRB_PB1)
 230:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_2                  (PWR_PUCRB_PB2)
 231:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_3                  (PWR_PUCRB_PB3)
 232:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_4                  (PWR_PUCRB_PB4)
 233:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_5                  (PWR_PUCRB_PB5)
 234:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_6                  (PWR_PUCRB_PB6)
 235:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_7                  (PWR_PUCRB_PB7)
 236:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_8                  (PWR_PUCRB_PB8)
 237:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_9                  (PWR_PUCRB_PB9)
 238:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_10                 (PWR_PUCRB_PB10)
 239:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_11                 (PWR_PUCRB_PB11)
 240:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_12                 (PWR_PUCRB_PB12)
 241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_13                 (PWR_PUCRB_PB13)
 242:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_14                 (PWR_PUCRB_PB14)
 243:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_15                 (PWR_PUCRB_PB15)
 244:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 245:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 246:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 247:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 248:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_SMPS_OPERATING_MODES SMPS step down converter operating modes
 249:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 250:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 251:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SMPS_BYPASS                 (0x00000000UL)    /*!< SMPS step down in bypass mode (di
 252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SMPS_STEP_DOWN              (PWR_CR5_SMPSEN)  /*!< SMPS step down in step down mode 
 253:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 254:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 255:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 256:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 257:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_RADIO_BUSY_POLARITY Radio busy signal polarity
 258:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 259:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 260:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_RADIO_BUSY_POLARITY_RISING  (0x00000000UL)     /*!< Radio busy signal polarity to ri
 261:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_RADIO_BUSY_POLARITY_FALLING (PWR_CR4_WRFBUSYP) /*!< Radio busy signal polarity to fa
 262:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 263:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 264:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 265:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 266:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_RADIO_BUSY_TRIGGER Radio busy trigger
 267:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 268:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 269:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_RADIO_BUSY_TRIGGER_NONE     (0x00000000UL)     /*!< Radio busy trigger action: no wa
 270:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_RADIO_BUSY_TRIGGER_WU_IT    (PWR_CR3_EWRFBUSY) /*!< Radio busy trigger action: wake-
 271:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 272:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 273:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 274:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 275:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_RADIO_IRQ_TRIGGER Radio IRQ trigger
 276:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 277:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 278:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_RADIO_IRQ_TRIGGER_NONE      (0x00000000UL)     /*!< Radio IRQ trigger action: no wak
 279:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_RADIO_IRQ_TRIGGER_WU_IT     (PWR_CR3_EWRFIRQ)  /*!< Radio IRQ trigger action: wake-u
 280:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 281:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 282:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 9


 283:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 284:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_RADIO_SPI_NSS_SRC Radio Sub-GHz radio SPI NSS source
 285:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 286:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 287:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SUBGHZSPI_NSS_SRC_SW        (0x00000000UL)            /*!< Sub-GHz radio SPI NSS con
 288:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SUBGHZSPI_NSS_SRC_LPTIM3    (PWR_CR1_SUBGHZSPINSSSEL) /*!< Sub-GHz radio SPI NSS con
 289:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 290:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 291:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 292:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 293:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 294:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 295:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 296:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 297:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Exported macro ------------------------------------------------------------*/
 298:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_Exported_Macros PWR Exported Macros
 299:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 300:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 301:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 302:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EM_WRITE_READ Common Write and read registers Macros
 303:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 304:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 305:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 306:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 307:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Write a value in PWR register
 308:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  __REG__ Register to be written
 309:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  __VALUE__ Value to be written in the register
 310:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 311:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 312:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_WriteReg(__REG__, __VALUE__) WRITE_REG(PWR->__REG__, (__VALUE__))
 313:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 314:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 315:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Read a value in PWR register
 316:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  __REG__ Register to be read
 317:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Register value
 318:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 319:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_ReadReg(__REG__) READ_REG(PWR->__REG__)
 320:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 321:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 322:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 323:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 324:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 325:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 326:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 327:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 328:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 329:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Exported functions --------------------------------------------------------*/
 330:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_Exported_Functions PWR Exported Functions
 331:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 332:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 333:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 334:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_Configuration Configuration
 335:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 336:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 337:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 338:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 339:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Switch from run main mode to run low-power mode.
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 10


 340:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          LPR           LL_PWR_EnterLowPowerRunMode
 341:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 343:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnterLowPowerRunMode(void)
 344:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 345:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR1, PWR_CR1_LPR);
 346:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 347:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 348:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 349:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Switch from run main mode to low-power mode.
 350:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          LPR           LL_PWR_ExitLowPowerRunMode
 351:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 352:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 353:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ExitLowPowerRunMode(void)
 354:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 355:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 356:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 357:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 358:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 359:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if the regulator is in low-power mode
 360:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          LPR           LL_PWR_IsEnabledLowPowerRunMode
 361:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 362:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 363:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledLowPowerRunMode(void)
 364:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 365:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR1, PWR_CR1_LPR) == (PWR_CR1_LPR)) ? 1UL : 0UL);
 366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 367:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 368:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 369:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set the main internal regulator output voltage
 370:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   A delay is required for the internal regulator to be ready
 371:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         after the voltage scaling has been changed.
 372:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         Check whether regulator reached the selected voltage level
 373:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         can be done using function @ref LL_PWR_IsActiveFlag_VOS().
 374:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          VOS           LL_PWR_SetRegulVoltageScaling
 375:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  VoltageScaling This parameter can be one of the following values:
 376:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
 377:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
 378:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 379:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 380:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
 381:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 382:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 383:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 384:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 385:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 386:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get the main internal regulator output voltage
 387:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          VOS           LL_PWR_GetRegulVoltageScaling
 388:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 389:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
 390:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
 391:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 392:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
 393:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 394:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 395:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 396:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 11


 397:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 398:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable access to the backup domain
 399:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
 400:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 401:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 402:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
 403:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 404:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR1, PWR_CR1_DBP);
 405:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 406:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 407:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 408:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable access to the backup domain
 409:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          DBP           LL_PWR_DisableBkUpAccess
 410:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 411:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 412:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableBkUpAccess(void)
 413:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 414:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 415:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 416:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 417:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 418:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if the backup domain is enabled
 419:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
 420:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 421:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 422:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
 423:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 424:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 425:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 426:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 427:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 428:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set Low-Power mode
 429:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          LPMS          LL_PWR_SetPowerMode
 430:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  LowPowerMode This parameter can be one of the following values:
 431:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP0
 432:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP1
 433:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP2
 434:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STANDBY
 435:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_SHUTDOWN
 436:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 437:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 438:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
 439:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 440:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 441:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 442:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 443:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 444:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get Low-Power mode
 445:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          LPMS          LL_PWR_GetPowerMode
 446:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 447:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP0
 448:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP1
 449:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP2
 450:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STANDBY
 451:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_SHUTDOWN
 452:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 453:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetPowerMode(void)
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 12


 454:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 455:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_LPMS));
 456:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 457:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 458:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 459:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set flash power-down mode during low-power run mode
 460:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          FPDR          LL_PWR_SetFlashPowerModeLPRun
 461:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  FlashLowPowerMode This parameter can be one of the following values:
 462:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_LPRUN_MODE_IDLE
 463:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_LPRUN_MODE_POWER_DOWN
 464:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 465:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 466:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetFlashPowerModeLPRun(uint32_t FlashLowPowerMode)
 467:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 468:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   /* Unlock bit FPDR */
 469:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->CR1, PWR_FLASH_POWER_MODE_UNLOCK_CODE);
 470:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 471:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   /* Update bit FPDR */
 472:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR1, PWR_CR1_FPDR, FlashLowPowerMode);
 473:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 474:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 475:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 476:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get flash power-down mode during low-power run mode
 477:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          FPDR          LL_PWR_GetFlashPowerModeLPRun
 478:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 479:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_LPRUN_MODE_IDLE
 480:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_LPRUN_MODE_POWER_DOWN
 481:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 482:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetFlashPowerModeLPRun(void)
 483:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 484:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_FPDR));
 485:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 486:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 487:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 488:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set flash power-down mode during sleep mode
 489:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          FPDS          LL_PWR_SetFlashPowerModeSleep
 490:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  FlashLowPowerMode This parameter can be one of the following values:
 491:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_SLEEP_MODE_IDLE
 492:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_SLEEP_MODE_POWER_DOWN
 493:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 494:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 495:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetFlashPowerModeSleep(uint32_t FlashLowPowerMode)
 496:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 497:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR1, PWR_CR1_FPDS, FlashLowPowerMode);
 498:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 499:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 500:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 501:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get flash power-down mode during sleep mode
 502:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          FPDS          LL_PWR_GetFlashPowerModeSleep
 503:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 504:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_SLEEP_MODE_IDLE
 505:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_SLEEP_MODE_POWER_DOWN
 506:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 507:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetFlashPowerModeSleep(void)
 508:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 509:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_FPDS));
 510:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 13


 511:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 512:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 513:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable the Power Voltage Monitoring on a peripheral
 514:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR2          PVME3         LL_PWR_EnablePVM
 515:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  PeriphVoltage This parameter can be one of the following values:
 516:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVM_VDDA_1_62V
 517:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 518:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 519:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnablePVM(uint32_t PeriphVoltage)
 520:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 521:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR2, PeriphVoltage);
 522:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 523:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 524:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 525:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable the Power Voltage Monitoring on a peripheral
 526:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR2          PVME3         LL_PWR_DisablePVM
 527:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  PeriphVoltage This parameter can be one of the following values:
 528:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVM_VDDA_1_62V
 529:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 530:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 531:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisablePVM(uint32_t PeriphVoltage)
 532:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 533:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR2, PeriphVoltage);
 534:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 535:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 536:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 537:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if Power Voltage Monitoring is enabled on a peripheral
 538:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR2          PVME3         LL_PWR_IsEnabledPVM
 539:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  PeriphVoltage This parameter can be one of the following values:
 540:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVM_VDDA_1_62V
 541:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 542:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 543:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledPVM(uint32_t PeriphVoltage)
 544:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 545:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR2, PeriphVoltage) == (PeriphVoltage)) ? 1UL : 0UL);
 546:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 547:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 548:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 549:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Configure the voltage threshold detected by the Power Voltage Detector
 550:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR2          PLS           LL_PWR_SetPVDLevel
 551:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  PVDLevel This parameter can be one of the following values:
 552:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_0
 553:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_1
 554:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_2
 555:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_3
 556:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_4
 557:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_5
 558:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_6
 559:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_7
 560:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 561:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 562:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetPVDLevel(uint32_t PVDLevel)
 563:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 564:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR2, PWR_CR2_PLS, PVDLevel);
 565:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 566:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 567:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 14


 568:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get the voltage threshold detection
 569:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR2          PLS           LL_PWR_GetPVDLevel
 570:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 571:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_0
 572:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_1
 573:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_2
 574:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_3
 575:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_4
 576:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_5
 577:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_6
 578:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_7
 579:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 580:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetPVDLevel(void)
 581:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 582:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR2, PWR_CR2_PLS));
 583:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 584:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 585:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 586:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable Power Voltage Detector
 587:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR2          PVDE          LL_PWR_EnablePVD
 588:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 589:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 590:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnablePVD(void)
 591:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 592:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 593:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 594:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 595:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 596:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable Power Voltage Detector
 597:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR2          PVDE          LL_PWR_DisablePVD
 598:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 599:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 600:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisablePVD(void)
 601:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 602:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
 603:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 604:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 605:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 606:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if Power Voltage Detector is enabled
 607:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR2          PVDE          LL_PWR_IsEnabledPVD
 608:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 609:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 610:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledPVD(void)
 611:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 612:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR2, PWR_CR2_PVDE) == (PWR_CR2_PVDE)) ? 1UL : 0UL);
 613:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 614:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 615:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 616:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set monitoring of supply voltage for radio operating level
 617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         (radio End Of Life), radio must be in active mode.
 618:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR5          RFEOLEN       LL_PWR_SetRadioEOL
 619:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  RadioEOL This parameter can be one of the following values:
 620:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_EOL_DISABLE
 621:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_EOL_ENABLE
 622:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 623:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetRadioEOL(uint32_t RadioEOL)
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 15


 625:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 626:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR5, PWR_CR5_RFEOLEN, RadioEOL);
 627:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 628:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 629:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 630:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get monitoring of supply voltage for radio operating level (radio End Of Life)
 631:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR5          RFEOLEN       LL_PWR_GetRadioEOL
 632:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 633:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_EOL_DISABLE
 634:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_EOL_ENABLE
 635:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 636:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetRadioEOL(void)
 637:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 638:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR5, PWR_CR5_RFEOLEN));
 639:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 640:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 641:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 642:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable Internal Wake-up line
 643:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EIWF          LL_PWR_EnableInternWU
 644:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 645:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 646:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableInternWU(void)
 647:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 648:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR3, PWR_CR3_EIWUL);
 649:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 650:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 651:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 652:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable Internal Wake-up line
 653:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EIWF          LL_PWR_DisableInternWU
 654:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 655:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 656:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableInternWU(void)
 657:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 658:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, PWR_CR3_EIWUL);
 659:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 660:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 661:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 662:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if Internal Wake-up line is enabled
 663:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EIWF          LL_PWR_IsEnabledInternWU
 664:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 665:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 666:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledInternWU(void)
 667:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 668:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, PWR_CR3_EIWUL) == (PWR_CR3_EIWUL)) ? 1UL : 0UL);
 669:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 670:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 671:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 672:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable pull-up and pull-down configuration
 673:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          APC           LL_PWR_EnablePUPDCfg
 674:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 675:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 676:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnablePUPDCfg(void)
 677:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 678:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR3, PWR_CR3_APC);
 679:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 680:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 681:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 16


 682:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable pull-up and pull-down configuration
 683:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          APC           LL_PWR_DisablePUPDCfg
 684:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 685:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 686:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisablePUPDCfg(void)
 687:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 688:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 689:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 690:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 691:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 692:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if pull-up and pull-down configuration is enabled
 693:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          APC           LL_PWR_IsEnabledPUPDCfg
 694:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 695:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 696:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledPUPDCfg(void)
 697:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 698:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, PWR_CR3_APC) == (PWR_CR3_APC)) ? 1UL : 0UL);
 699:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 700:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 701:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 702:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable SRAM2 content retention in Standby mode
 703:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          RRS           LL_PWR_EnableSRAM2Retention
 704:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 705:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 706:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableSRAM2Retention(void)
 707:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 708:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR3, PWR_CR3_RRS);
 709:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 710:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 711:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 712:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable SRAM2 content retention in Standby mode
 713:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          RRS           LL_PWR_DisableSRAM2Retention
 714:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 715:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 716:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableSRAM2Retention(void)
 717:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 718:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
 719:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 720:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 721:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 722:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if SRAM2 content retention in Standby mode is enabled
 723:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          RRS           LL_PWR_IsEnabledSRAM2Retention
 724:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 725:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 726:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledSRAM2Retention(void)
 727:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 728:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, PWR_CR3_RRS) == (PWR_CR3_RRS)) ? 1UL : 0UL);
 729:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 730:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 731:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 732:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable wake-up power voltage detection with trigger for CPU1
 733:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Wake-up power voltage detection status can be checked
 734:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         using function @ref LL_PWR_IsActiveFlag_WPVD().
 735:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EWPVD         LL_PWR_EnableWPVD
 736:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 737:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 738:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableWPVD(void)
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 17


 739:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 740:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR3, PWR_CR3_EWPVD);
 741:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 742:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable wake-up power voltage detection with trigger for CPU1
 745:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EWPVD         LL_PWR_DisableWPVD
 746:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 747:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 748:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableWPVD(void)
 749:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 750:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, PWR_CR3_EWPVD);
 751:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 752:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 753:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 754:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if wake-up power voltage detection is enabled with trigger for CPU1
 755:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EWPVD         LL_PWR_IsEnabledWPVD
 756:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 757:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 758:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledWPVD(void)
 759:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 760:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, PWR_CR3_EWPVD) == (PWR_CR3_EWPVD)) ? 1UL : 0UL);
 761:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 762:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 763:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 764:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable periodical sampling of supply voltage in Stop and Standby
 765:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes for detecting condition of PDR and BOR reset.
 766:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Caution: When enabled, and if the supply voltage drops below
 767:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         the minimum operating condition between two supply voltage samples,
 768:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         the reset condition is missed and no reset is generated.
 769:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          ULPEN         LL_PWR_EnableBORPVD_ULP
 770:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 771:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 772:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableBORPVD_ULP(void)
 773:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 774:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR3, PWR_CR3_ULPEN);
 775:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 776:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 777:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 778:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable periodical sampling of supply voltage in Stop and Standby
 779:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes for detecting condition of PDR and BOR reset.
 780:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          ULPEN         LL_PWR_DisableBORPVD_ULP
 781:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 782:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 783:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableBORPVD_ULP(void)
 784:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 785:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, PWR_CR3_ULPEN);
 786:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 787:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 788:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 789:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if periodical sampling of supply voltage in Stop and Standby
 790:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes is enabled.
 791:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          ULPEN         LL_PWR_IsEnabledBORPVD_ULP
 792:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 793:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 794:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledBORPVD_ULP(void)
 795:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 18


 796:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, PWR_CR3_ULPEN) == (PWR_CR3_ULPEN)) ? 1UL : 0UL);
 797:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 798:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 799:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 800:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable the WakeUp PINx functionality
 801:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EWUP1         LL_PWR_EnableWakeUpPin\n
 802:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR3          EWUP2         LL_PWR_EnableWakeUpPin\n
 803:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR3          EWUP3         LL_PWR_EnableWakeUpPin
 804:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 805:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 806:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
 807:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 808:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 809:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 810:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableWakeUpPin(uint32_t WakeUpPin)
 811:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 812:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR3, WakeUpPin);
 813:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 814:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 815:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 816:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable the WakeUp PINx functionality
 817:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EWUP1         LL_PWR_DisableWakeUpPin\n
 818:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR3          EWUP2         LL_PWR_DisableWakeUpPin\n
 819:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR3          EWUP3         LL_PWR_DisableWakeUpPin
 820:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 821:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 822:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
 823:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 824:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 825:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 826:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableWakeUpPin(uint32_t WakeUpPin)
 827:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 828:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, WakeUpPin);
 829:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 830:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 831:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 832:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if the WakeUp PINx functionality is enabled
 833:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EWUP1         LL_PWR_IsEnabledWakeUpPin\n
 834:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR3          EWUP2         LL_PWR_IsEnabledWakeUpPin\n
 835:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR3          EWUP3         LL_PWR_IsEnabledWakeUpPin
 836:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 838:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
 839:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 840:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 841:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 842:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledWakeUpPin(uint32_t WakeUpPin)
 843:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 844:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, WakeUpPin) == (WakeUpPin)) ? 1UL : 0UL);
 845:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 846:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 847:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 848:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set the resistor impedance
 849:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          VBRS          LL_PWR_SetBattChargResistor
 850:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  Resistor This parameter can be one of the following values:
 851:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_BATT_CHARG_RESISTOR_5K
 852:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_BATT_CHARGRESISTOR_1_5K
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 19


 853:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 854:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 855:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetBattChargResistor(uint32_t Resistor)
 856:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 857:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR4, PWR_CR4_VBRS, Resistor);
 858:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 859:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 860:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 861:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get the resistor impedance
 862:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          VBRS          LL_PWR_GetBattChargResistor
 863:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 864:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_BATT_CHARG_RESISTOR_5K
 865:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_BATT_CHARGRESISTOR_1_5K
 866:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 867:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetBattChargResistor(void)
 868:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 869:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR4, PWR_CR4_VBRS));
 870:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 871:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 872:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 873:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable battery charging
 874:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          VBE           LL_PWR_EnableBatteryCharging
 875:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 876:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 877:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableBatteryCharging(void)
 878:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 879:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR4, PWR_CR4_VBE);
 880:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 881:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 882:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 883:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable battery charging
 884:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          VBE           LL_PWR_DisableBatteryCharging
 885:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 886:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 887:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableBatteryCharging(void)
 888:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 889:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR4, PWR_CR4_VBE);
 890:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 891:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 892:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 893:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if battery charging is enabled
 894:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          VBE           LL_PWR_IsEnabledBatteryCharging
 895:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 896:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 897:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledBatteryCharging(void)
 898:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 899:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR4, PWR_CR4_VBE) == (PWR_CR4_VBE)) ? 1UL : 0UL);
 900:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 901:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 902:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 903:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set the Wake-Up pin polarity low for the event detection
 904:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          WP1           LL_PWR_SetWakeUpPinPolarityLow\n
 905:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR4          WP2           LL_PWR_SetWakeUpPinPolarityLow\n
 906:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR4          WP3           LL_PWR_SetWakeUpPinPolarityLow
 907:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 908:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 909:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 20


 910:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 911:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 912:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 913:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityLow(uint32_t WakeUpPin)
 914:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 915:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR4, WakeUpPin);
 916:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 917:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 918:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 919:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set the Wake-Up pin polarity high for the event detection
 920:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          WP1           LL_PWR_SetWakeUpPinPolarityHigh\n
 921:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR4          WP2           LL_PWR_SetWakeUpPinPolarityHigh\n
 922:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR4          WP3           LL_PWR_SetWakeUpPinPolarityHigh
 923:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 924:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 925:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
 926:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 927:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 928:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 929:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityHigh(uint32_t WakeUpPin)
 930:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 931:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR4, WakeUpPin);
 932:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 933:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 934:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 935:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get the Wake-Up pin polarity for the event detection
 936:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          WP1           LL_PWR_IsWakeUpPinPolarityLow\n
 937:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR4          WP2           LL_PWR_IsWakeUpPinPolarityLow\n
 938:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR4          WP3           LL_PWR_IsWakeUpPinPolarityLow
 939:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 940:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 941:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
 942:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 943:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 944:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 945:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsWakeUpPinPolarityLow(uint32_t WakeUpPin)
 946:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 947:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR4, WakeUpPin) == (WakeUpPin)) ? 1UL : 0UL);
 948:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 949:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 950:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 951:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable GPIO pull-up state in Standby and Shutdown modes
 952:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Some pins are not configurable for pulling in Standby and Shutdown
 953:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes. Refer to reference manual for available pins and ports.
 954:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll PUCRA        PU0-15        LL_PWR_EnableGPIOPullUp\n
 955:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRB        PU0-15        LL_PWR_EnableGPIOPullUp\n
 956:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRC        PU0-15        LL_PWR_EnableGPIOPullUp\n
 957:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRH        PU0-15        LL_PWR_EnableGPIOPullUp
 958:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
 959:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
 960:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
 961:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
 962:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_H
 963:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
 964:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
 965:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
 966:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 21


 967:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
 968:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
 969:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
 970:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
 971:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
 972:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
 973:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
 974:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
 975:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
 976:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
 977:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
 978:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
 979:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
 980:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 981:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 982:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
 983:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 984:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
 985:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 986:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 987:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 988:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable GPIO pull-up state in Standby and Shutdown modes
 989:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Some pins are not configurable for pulling in Standby and Shutdown
 990:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes. Refer to reference manual for available pins and ports.
 991:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll PUCRA        PU0-15        LL_PWR_DisableGPIOPullUp\n
 992:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRB        PU0-15        LL_PWR_DisableGPIOPullUp\n
 993:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRC        PU0-15        LL_PWR_DisableGPIOPullUp\n
 994:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRH        PU0-15        LL_PWR_DisableGPIOPullUp
 995:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
 996:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
 997:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
 998:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
 999:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_H
1000:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
1001:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
1002:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
1003:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
1004:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
1005:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
1006:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
1007:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
1008:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
1009:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
1010:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
1011:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
1012:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
1013:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
1014:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
1015:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
1016:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
1017:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1018:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1019:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
1020:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1021:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
1022:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1023:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 22


1024:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1025:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if GPIO pull-up state is enabled
1026:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll PUCRA        PU0-15        LL_PWR_IsEnabledGPIOPullUp\n
1027:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRB        PU0-15        LL_PWR_IsEnabledGPIOPullUp\n
1028:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRC        PU0-15        LL_PWR_IsEnabledGPIOPullUp\n
1029:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRH        PU0-15        LL_PWR_IsEnabledGPIOPullUp
1030:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
1031:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
1032:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
1033:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
1034:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_H
1035:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
1036:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
1037:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
1038:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
1039:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
1040:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
1041:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
1042:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
1043:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
1044:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
1045:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
1046:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
1047:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
1048:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
1049:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
1050:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
1051:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
1052:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1053:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1054:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
1055:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1056:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(*((__IO uint32_t *)(GPIO)), GPIONumber) == (GPIONumber)) ? 1UL : 0UL);
1057:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1058:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1059:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1060:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable GPIO pull-down state in Standby and Shutdown modes
1061:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Some pins are not configurable for pulling in Standby and Shutdown
1062:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes. Refer to reference manual for available pins and ports.
1063:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll PDCRA        PD0-15        LL_PWR_EnableGPIOPullDown\n
1064:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRB        PD0-15        LL_PWR_EnableGPIOPullDown\n
1065:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRC        PD0-15        LL_PWR_EnableGPIOPullDown\n
1066:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRH        PD0-15        LL_PWR_EnableGPIOPullDown
1067:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
1068:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
1069:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
1070:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
1071:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_H
1072:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
1073:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
1074:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
1075:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
1076:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
1077:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
1078:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
1079:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
1080:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 23


1081:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
1082:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
1083:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
1084:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
1085:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
1086:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
1087:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
1088:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
1089:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1090:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1091:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
1092:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1093:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(*((__IO uint32_t *)(GPIO + 4U)), GPIONumber);
1094:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1095:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1096:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1097:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable GPIO pull-down state in Standby and Shutdown modes
1098:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Some pins are not configurable for pulling in Standby and Shutdown
1099:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes. Refer to reference manual for available pins and ports.
1100:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll PDCRA        PD0-15        LL_PWR_DisableGPIOPullDown\n
1101:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRB        PD0-15        LL_PWR_DisableGPIOPullDown\n
1102:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRC        PD0-15        LL_PWR_DisableGPIOPullDown\n
1103:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRH        PD0-15        LL_PWR_DisableGPIOPullDown
1104:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
1105:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
1106:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
1107:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
1108:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_H
1109:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
1110:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
1111:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
1112:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
1113:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
1114:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
1115:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
1116:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
1117:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
1118:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
1119:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
1120:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
1121:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
1122:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
1123:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
1124:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
1125:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
1126:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1127:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1128:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
1129:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1130:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4U)), GPIONumber);
1131:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1132:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1133:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1134:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if GPIO pull-down state is enabled
1135:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll PDCRA        PD0-15        LL_PWR_IsEnabledGPIOPullDown\n
1136:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRB        PD0-15        LL_PWR_IsEnabledGPIOPullDown\n
1137:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRC        PD0-15        LL_PWR_IsEnabledGPIOPullDown\n
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 24


1138:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRH        PD0-15        LL_PWR_IsEnabledGPIOPullDown
1139:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
1140:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
1141:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
1142:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
1143:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_H
1144:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
1145:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
1146:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
1147:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
1148:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
1149:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
1150:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
1151:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
1152:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
1153:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
1154:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
1155:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
1156:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
1157:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
1158:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
1159:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
1160:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
1161:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1162:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1163:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
1164:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1165:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(*((__IO uint32_t *)(GPIO + 4U)), GPIONumber) == (GPIONumber)) ? 1UL : 0UL);
1166:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1167:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1168:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1169:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
1170:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1171:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1172:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_Configuration_SMPS Configuration of SMPS
1173:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
1174:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1175:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1176:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1177:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set SMPS operating mode
1178:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   In case of a board without SMPS coil mounted, SMPS should not be activated.
1179:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_SetMode
1180:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  OperatingMode This parameter can be one of the following values:
1181:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SMPS_BYPASS
1182:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SMPS_STEP_DOWN
1183:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1184:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1185:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SMPS_SetMode(uint32_t OperatingMode)
1186:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1187:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR5, PWR_CR5_SMPSEN, OperatingMode);
1188:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1189:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1190:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1191:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get SMPS operating mode
1192:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_GetMode
1193:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1194:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SMPS_BYPASS
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 25


1195:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SMPS_STEP_DOWN
1196:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1197:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_SMPS_GetMode(void)
1198:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1199:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR5, PWR_CR5_SMPSEN));
1200:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1201:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1202:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1203:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get SMPS effective operating mode
1204:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   SMPS operating mode can be changed by hardware, therefore
1205:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         requested operating mode can differ from effective low power mode.
1206:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         - dependency SubGhz Radio IP: can switch SMPS on for radio activity.
1207:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   In case of a board without SMPS coil mounted, SMPS should not be activated
1208:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         and this function is not relevant.
1209:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          SMPSRDY       LL_PWR_SMPS_GetEffectiveMode
1210:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1211:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SMPS_BYPASS
1212:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SMPS_STEP_DOWN
1213:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1214:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_SMPS_GetEffectiveMode(void)
1215:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1216:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   /* Return a value corresponding to definition of literals                   */
1217:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   /* LL_PWR_SMPS_BYPASS or LL_PWR_SMPS_STEP_DOWN.                             */
1218:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) << (PWR_CR5_SMPSEN_Pos - PWR_SR2_SMPSRDY_Po
1219:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1220:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1221:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1222:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  SMPS step down converter enable
1223:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   This function can be used for specific usage of the SMPS,
1224:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         for general usage of the SMPS the function
1225:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @ref LL_PWR_SMPS_SetMode() should be used instead.
1226:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
1227:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1228:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1229:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SMPS_Enable(void)
1230:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1231:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
1232:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1233:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1234:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1235:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  SMPS step down converter enable
1236:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   This function can be used for specific usage of the SMPS,
1237:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         for general usage of the SMPS the function
1238:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @ref LL_PWR_SMPS_SetMode() should be used instead.
1239:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Disable
1240:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1242:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SMPS_Disable(void)
1243:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1244:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR5, PWR_CR5_SMPSEN);
1245:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1246:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1247:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1248:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if the SMPS step down converter is enabled
1249:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_IsEnabled
1250:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1251:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 26


1252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_SMPS_IsEnabled(void)
1253:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1254:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR5, PWR_CR5_SMPSEN) == (PWR_CR5_SMPSEN)) ? 1UL : 0UL);
1255:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1256:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1257:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1258:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
1259:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1260:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1261:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_Configuration_Radio Configuration of radio
1262:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
1263:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1264:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1265:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1266:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set radio busy signal polarity
1267:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          RFBUSYP       LL_PWR_SetRadioBusyPolarity
1268:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  RadioBusyPolarity This parameter can be one of the following values:
1269:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_POLARITY_RISING
1270:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_POLARITY_FALLING
1271:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1272:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1273:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetRadioBusyPolarity(uint32_t RadioBusyPolarity)
1274:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1275:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR4, PWR_CR4_WRFBUSYP, RadioBusyPolarity);
1276:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1277:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1278:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1279:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get radio busy signal polarity
1280:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          RFBUSYP       LL_PWR_GetRadioBusyPolarity
1281:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1282:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_POLARITY_RISING
1283:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_POLARITY_FALLING
1284:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1285:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetRadioBusyPolarity(void)
1286:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1287:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR4, PWR_CR4_WRFBUSYP));
1288:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1289:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1290:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1291:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set radio busy trigger action for CPU1: wake-up from low-power mode
1292:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         Standby.
1293:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Signal polarity can be configured using function
1294:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @ref LL_PWR_SetRadioBusyPolarity().
1295:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          ERFBUSY       LL_PWR_SetRadioBusyTrigger
1296:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  RadioBusyTrigger This parameter can be one of the following values:
1297:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
1298:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
1299:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1300:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1301:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
1302:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1303:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
1304:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1305:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1306:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1307:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get radio busy trigger action for CPU1: wake-up from low-power mode
1308:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         Standby.
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 27


1309:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          ERFBUSY       LL_PWR_GetRadioBusyTrigger
1310:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1311:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
1312:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
1313:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1314:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetRadioBusyTrigger(void)
1315:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1316:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR3, PWR_CR3_EWRFBUSY));
1317:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1318:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1319:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1320:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set radio IRQ trigger action for CPU1: wake-up from low-power mode
1321:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         Standby.
1322:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          ERFIRQ        LL_PWR_SetRadioIRQTrigger
1323:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  RadioIRQTrigger This parameter can be one of the following values:
1324:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_IRQ_TRIGGER_NONE
1325:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_IRQ_TRIGGER_WU_IT
1326:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1327:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1328:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetRadioIRQTrigger(uint32_t RadioIRQTrigger)
1329:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1330:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR3, PWR_CR3_EWRFIRQ, RadioIRQTrigger);
1331:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1332:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1333:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1334:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get radio IRQ trigger action for CPU1: wake-up from low-power mode
1335:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         Standby.
1336:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          ERFIRQ        LL_PWR_GetRadioIRQTrigger
1337:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1338:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_IRQ_TRIGGER_NONE
1339:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_IRQ_TRIGGER_WU_IT
1340:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1341:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetRadioIRQTrigger(void)
1342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1343:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR3, PWR_CR3_EWRFIRQ));
1344:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1345:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1346:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1347:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set sub-GHz radio SPI NSS control source
1348:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          SUBGHZSPINSSSEL LL_PWR_SetSUBGHZSPI_NSSSource
1349:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  RadioSPI_NSSSource This parameter can be one of the following values:
1350:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SUBGHZSPI_NSS_SRC_SW
1351:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SUBGHZSPI_NSS_SRC_LPTIM3
1352:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1353:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1354:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetSUBGHZSPI_NSSSource(uint32_t RadioSPI_NSSSource)
1355:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1356:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR1, PWR_CR1_SUBGHZSPINSSSEL, RadioSPI_NSSSource);
1357:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1358:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1359:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1360:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get sub-GHz radio SPI NSS control source
1361:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          SUBGHZSPINSSSEL LL_PWR_GetSUBGHZSPI_NSSSource
1362:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1363:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SUBGHZSPI_NSS_SRC_SW
1364:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SUBGHZSPI_NSS_SRC_LPTIM3
1365:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 28


1366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetSUBGHZSPI_NSSSource(void)
1367:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1368:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_SUBGHZSPINSSSEL));
1369:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1370:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1371:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1372:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set sub-GHz radio SPI NSS at logical level high.
1373:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
1374:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1375:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1376:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
1377:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1378:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
1379:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1380:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1381:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1382:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set sub-GHz radio SPI NSS at logical level low.
1383:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
1384:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1385:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1386:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
1387:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1388:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
1389:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1390:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1391:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1392:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check whether sub-GHz radio SPI NSS is at logical level high or low.
1393:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SUBGHZSPICR  NSS           LL_PWR_IsSUBGHZSPI_NSS_Selected
1394:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 for SUBGHZSPI_NSS selected or 0 for SUBGHZSPI_NSS unselected).
1395:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1396:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsSUBGHZSPI_NSS_Selected(void)
1397:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1398:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS) != (PWR_SUBGHZSPICR_NSS)) ? 1UL : 0UL);
1399:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1400:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1401:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1402:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
1403:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1404:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1405:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #if defined(DUAL_CORE)
1406:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_Configuration_Radio_CPU2 Configuration of radio for CPU2
1407:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
1408:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1409:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1410:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1411:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set radio busy trigger action for CPU2: wake-up from low-power mode,
1412:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         interruption.
1413:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Signal polarity can be configured using function
1414:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @ref LL_PWR_SetRadioBusyPolarity().
1415:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        ERFBUSY       LL_C2_PWR_SetRadioBusyTrigger
1416:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  RadioBusyTrigger This parameter can be one of the following values:
1417:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
1418:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
1419:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1420:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1421:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
1422:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 29


1423:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->C2CR3, PWR_C2CR3_EWRFBUSY, RadioBusyTrigger);
1424:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1425:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1426:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1427:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get radio busy trigger action for CPU2: wake-up from low-power mode,
1428:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         interruption.
1429:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        ERFBUSY       LL_C2_PWR_GetRadioBusyTrigger
1430:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1431:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
1432:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
1433:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1434:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_GetRadioBusyTrigger(void)
1435:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1436:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   /* Note: Bit shift performed for literals to be generic between CPU1 and CPU2 */
1437:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->C2CR3, PWR_C2CR3_EWRFBUSY));
1438:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1439:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1440:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1441:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set radio IRQ trigger action for CPU2: wake-up from low-power mode,
1442:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         interruption.
1443:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        ERFIRQ        LL_C2_PWR_SetRadioIRQTrigger
1444:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  RadioIRQTrigger This parameter can be one of the following values:
1445:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_IRQ_TRIGGER_NONE
1446:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_IRQ_TRIGGER_WU_IT
1447:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1448:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1449:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_SetRadioIRQTrigger(uint32_t RadioIRQTrigger)
1450:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1451:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->C2CR3, PWR_C2CR3_EWRFIRQ, RadioIRQTrigger);
1452:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1453:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1454:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1455:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get radio IRQ trigger action for CPU2: wake-up from low-power mode,
1456:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         interruption.
1457:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        ERFIRQ        LL_C2_PWR_GetRadioIRQTrigger
1458:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1459:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_IRQ_TRIGGER_NONE
1460:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_IRQ_TRIGGER_WU_IT
1461:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1462:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_GetRadioIRQTrigger(void)
1463:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1464:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->C2CR3, PWR_C2CR3_EWRFIRQ));
1465:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1466:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1467:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1468:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
1469:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1470:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1471:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_Configuration_Multicore Configuration of multicore, intended to be executed
1472:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
1473:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1474:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1475:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1476:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Boot CPU2 after reset or wakeup from Stop or Standby modes.
1477:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   CPU2 can boot from configuration of this function or from
1478:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         an illegal access. For information of boot source,
1479:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 30


1480:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
1481:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1482:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1483:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableBootC2(void)
1484:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1485:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
1486:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1487:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1488:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1489:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Do not allow CPU2 to boot after reset or wakeup from Stop or Standby
1490:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes.
1491:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          C2BOOT        LL_PWR_DisableBootC2
1492:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1493:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1494:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableBootC2(void)
1495:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1496:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR4, PWR_CR4_C2BOOT);
1497:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1498:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1499:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1500:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if bit to boot CPU2 after reset or wakeup from Stop or Standby
1501:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes is set
1502:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   CPU2 can boot from configuration of this function or from
1503:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         an illegal access. For information of boot source,
1504:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
1505:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          C2BOOT        LL_PWR_IsEnabledBootC2
1506:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0)
1507:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1508:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledBootC2(void)
1509:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1510:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR4, PWR_CR4_C2BOOT) == (PWR_CR4_C2BOOT)) ? 1UL : 0UL);
1511:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1512:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1513:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1514:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
1515:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1516:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1517:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_Configuration_CPU2 Configuration of CPU2, intended to be executed by CPU2
1518:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
1519:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1520:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1521:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1522:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set Low-Power mode for CPU2
1523:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR1        LPMS          LL_C2_PWR_SetPowerMode
1524:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  LowPowerMode This parameter can be one of the following values:
1525:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP0
1526:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP1
1527:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP2
1528:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STANDBY
1529:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_SHUTDOWN
1530:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1531:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1532:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
1533:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1534:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
1535:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1536:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 31


1537:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1538:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get Low-Power mode for CPU2
1539:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR1        LPMS          LL_C2_PWR_GetPowerMode
1540:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1541:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP0
1542:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP1
1543:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP2
1544:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STANDBY
1545:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_SHUTDOWN
1546:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1547:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_GetPowerMode(void)
1548:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1549:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->C2CR1, PWR_C2CR1_LPMS));
1550:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1551:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1552:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1553:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set flash power-down mode during low-power run mode for CPU2
1554:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR1        FPDR          LL_C2_PWR_SetFlashPowerModeLPRun
1555:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  FlashLowPowerMode This parameter can be one of the following values:
1556:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_LPRUN_MODE_IDLE
1557:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_LPRUN_MODE_POWER_DOWN
1558:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1559:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1560:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_SetFlashPowerModeLPRun(uint32_t FlashLowPowerMode)
1561:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1562:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   /* Unlock bit FPDR */
1563:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->C2CR1, PWR_FLASH_POWER_MODE_UNLOCK_CODE);
1564:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1565:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   /* Update bit FPDR */
1566:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->C2CR1, PWR_C2CR1_FPDR, FlashLowPowerMode);
1567:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1568:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1569:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1570:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get flash power-down mode during low-power run mode for CPU2
1571:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR1        FPDR          LL_C2_PWR_GetFlashPowerModeLPRun
1572:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1573:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_LPRUN_MODE_IDLE
1574:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_LPRUN_MODE_POWER_DOWN
1575:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1576:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_GetFlashPowerModeLPRun(void)
1577:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1578:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->C2CR1, PWR_C2CR1_FPDR));
1579:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1580:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1581:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1582:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set flash power-down mode during sleep mode for CPU2
1583:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR1        FPDS          LL_C2_PWR_SetFlashPowerModeSleep
1584:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  FlashLowPowerMode This parameter can be one of the following values:
1585:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_SLEEP_MODE_IDLE
1586:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_SLEEP_MODE_POWER_DOWN
1587:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1588:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1589:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_SetFlashPowerModeSleep(uint32_t FlashLowPowerMode)
1590:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1591:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->C2CR1, PWR_C2CR1_FPDS, FlashLowPowerMode);
1592:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1593:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 32


1594:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1595:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get flash power-down mode during sleep mode for CPU2
1596:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR1        FPDS          LL_C2_PWR_GetFlashPowerModeSleep
1597:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1598:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_SLEEP_MODE_IDLE
1599:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_SLEEP_MODE_POWER_DOWN
1600:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1601:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_GetFlashPowerModeSleep(void)
1602:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1603:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->C2CR1, PWR_C2CR1_FPDS));
1604:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1605:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1606:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1607:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1608:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable Internal Wake-up line for CPU2
1609:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EIWUL         LL_C2_PWR_EnableInternWU
1610:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1611:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1612:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_EnableInternWU(void)
1613:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1614:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->C2CR3, PWR_C2CR3_EIWUL);
1615:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1616:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1618:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable Internal Wake-up line for CPU2
1619:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EIWUL         LL_C2_PWR_DisableInternWU
1620:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1621:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1622:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_DisableInternWU(void)
1623:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->C2CR3, PWR_C2CR3_EIWUL);
1625:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1626:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1627:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1628:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if Internal Wake-up line is enabled for CPU2
1629:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EIWUL         LL_C2_PWR_IsEnabledInternWU
1630:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1631:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1632:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_IsEnabledInternWU(void)
1633:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1634:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->C2CR3, PWR_C2CR3_EIWUL) == (PWR_C2CR3_EIWUL)) ? 1UL : 0UL);
1635:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1636:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1637:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1638:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable the WakeUp PINx functionality
1639:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EWUP1         LL_C2_PWR_EnableWakeUpPin\n
1640:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         C2CR3        EWUP2         LL_C2_PWR_EnableWakeUpPin\n
1641:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         C2CR3        EWUP3         LL_C2_PWR_EnableWakeUpPin
1642:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
1643:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
1644:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
1645:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
1646:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1647:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1648:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_EnableWakeUpPin(uint32_t WakeUpPin)
1649:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1650:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->C2CR3, WakeUpPin);
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 33


1651:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1652:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1653:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1654:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable the WakeUp PINx functionality
1655:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EWUP1         LL_C2_PWR_EnableWakeUpPin\n
1656:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         C2CR3        EWUP2         LL_C2_PWR_EnableWakeUpPin\n
1657:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         C2CR3        EWUP3         LL_C2_PWR_EnableWakeUpPin
1658:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
1659:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
1660:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
1661:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
1662:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1663:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1664:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_DisableWakeUpPin(uint32_t WakeUpPin)
1665:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1666:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->C2CR3, WakeUpPin);
1667:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1668:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1669:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1670:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if the WakeUp PINx functionality is enabled
1671:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EWUP1         LL_C2_PWR_EnableWakeUpPin\n
1672:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         C2CR3        EWUP2         LL_C2_PWR_EnableWakeUpPin\n
1673:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         C2CR3        EWUP3         LL_C2_PWR_EnableWakeUpPin
1674:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
1675:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
1676:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
1677:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
1678:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1679:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1680:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_IsEnabledWakeUpPin(uint32_t WakeUpPin)
1681:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1682:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->C2CR3, WakeUpPin) == (WakeUpPin)) ? 1UL : 0UL);
1683:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1684:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1685:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1686:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable pull-up and pull-down configuration for CPU2
1687:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        APC           LL_C2_PWR_EnablePUPDCfg
1688:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1689:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1690:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_EnablePUPDCfg(void)
1691:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1692:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->C2CR3, PWR_C2CR3_APC);
1693:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1694:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1695:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1696:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable pull-up and pull-down configuration for CPU2
1697:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        APC           LL_C2_PWR_DisablePUPDCfg
1698:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1699:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1700:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_DisablePUPDCfg(void)
1701:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1702:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->C2CR3, PWR_C2CR3_APC);
1703:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1704:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1705:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1706:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if pull-up and pull-down configuration is enabled for CPU2
1707:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        APC           LL_C2_PWR_IsEnabledPUPDCfg
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 34


1708:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1709:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1710:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_IsEnabledPUPDCfg(void)
1711:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1712:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->C2CR3, PWR_C2CR3_APC) == (PWR_C2CR3_APC)) ? 1UL : 0UL);
1713:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1714:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1715:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1716:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable wake-up power voltage detection with trigger for CPU2
1717:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Wake-up power voltage detection status can be checked
1718:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         using function @ref LL_PWR_IsActiveFlag_WPVD().
1719:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EWPVD         LL_C2_PWR_EnableWPVD
1720:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1721:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1722:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_EnableWPVD(void)
1723:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1724:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->C2CR3, PWR_C2CR3_EWPVD);
1725:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1726:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1727:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1728:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable wake-up power voltage detection with trigger for CPU2
1729:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EWPVD         LL_C2_PWR_DisableWPVD
1730:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1731:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1732:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_DisableWPVD(void)
1733:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1734:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->C2CR3, PWR_C2CR3_EWPVD);
1735:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1736:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1737:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1738:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if wake-up power voltage detection is enabled with trigger for CPU2
1739:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EWPVD         LL_C2_PWR_IsEnabledWPVD
1740:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1741:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1742:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_IsEnabledWPVD(void)
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->C2CR3, PWR_C2CR3_EWPVD) == (PWR_C2CR3_EWPVD)) ? 1UL : 0UL);
1745:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1746:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1747:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1748:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable CPU2 wake-up from low-power mode on illegal access occurrence
1749:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Can be configured from CPU2 only
1750:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SECCFGR      C2EWILA       LL_PWR_C2_EnableWakeUp_ILAC
1751:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1752:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1753:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_C2_EnableWakeUp_ILAC(void)
1754:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1755:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->SECCFGR, PWR_SECCFGR_C2EWILA);
1756:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1757:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1758:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1759:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable CPU2 wake-up from low-power mode on illegal access occurrence
1760:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Can be configured from CPU2 only
1761:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SECCFGR      C2EWILA       LL_PWR_C2_DisableWakeUp_ILAC
1762:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1763:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1764:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_C2_DisableWakeUp_ILAC(void)
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 35


1765:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1766:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->SECCFGR, PWR_SECCFGR_C2EWILA);
1767:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1768:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1769:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1770:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if bit to wake-up CPU2 from low-power mode on illegal access
1771:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         occurrence is set
1772:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Can be used from CPU2 only
1773:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SECCFGR      C2EWILA       LL_PWR_C2_IsEnabledWakeUp_ILAC
1774:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0)
1775:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1776:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_C2_IsEnabledWakeUp_ILAC(void)
1777:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1778:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SECCFGR, PWR_SECCFGR_C2EWILA) == (PWR_SECCFGR_C2EWILA)) ? 1UL : 0UL);
1779:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1780:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #endif
1781:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1782:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1783:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
1784:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1785:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1786:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_FLAG_Management FLAG_Management
1787:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
1788:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1789:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1790:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1791:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get Internal Wake-up line Flag
1792:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR1          WUFI          LL_PWR_IsActiveFlag_InternWU
1793:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1794:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1795:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_InternWU(void)
1796:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1797:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WUFI) == (PWR_SR1_WUFI)) ? 1UL : 0UL);
1798:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1799:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1800:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1801:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get Wake-up Flag 3
1802:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR1          WUF3          LL_PWR_IsActiveFlag_WU3
1803:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1804:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1805:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_WU3(void)
1806:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1807:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WUF3) == (PWR_SR1_WUF3)) ? 1UL : 0UL);
1808:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1809:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1810:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1811:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get Wake-up Flag 2
1812:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR1          WUF2          LL_PWR_IsActiveFlag_WU2
1813:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1814:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1815:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_WU2(void)
1816:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1817:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WUF2) == (PWR_SR1_WUF2)) ? 1UL : 0UL);
1818:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1819:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1820:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1821:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get Wake-up Flag 1
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 36


1822:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR1          WUF1          LL_PWR_IsActiveFlag_WU1
1823:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1824:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1825:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_WU1(void)
1826:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1827:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WUF1) == (PWR_SR1_WUF1)) ? 1UL : 0UL);
1828:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1829:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1830:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1831:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Clear Wake-up Flags
1832:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
1833:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1834:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1835:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
1836:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
1838:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1839:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1840:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1841:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Clear Wake-up Flag 3
1842:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SCR          CWUF3         LL_PWR_ClearFlag_WU3
1843:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1844:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1845:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_WU3(void)
1846:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1847:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWUF3);
1848:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1849:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1850:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1851:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Clear Wake-up Flag 2
1852:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SCR          CWUF2         LL_PWR_ClearFlag_WU2
1853:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1854:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1855:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_WU2(void)
1856:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1857:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWUF2);
1858:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1859:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1860:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1861:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Clear Wake-up Flag 1
1862:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SCR          CWUF1         LL_PWR_ClearFlag_WU1
1863:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1864:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1865:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_WU1(void)
1866:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1867:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWUF1);
1868:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1869:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1870:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1871:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Indicate whether VDDA voltage is below or above PVM3 threshold
1872:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          PVMO3         LL_PWR_IsActiveFlag_PVMO3
1873:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1874:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1875:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_PVMO3(void)
1876:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1877:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_PVMO3) == (PWR_SR2_PVMO3)) ? 1UL : 0UL);
1878:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 37


1879:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1880:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1881:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Indicate whether VDD voltage is below or above the selected PVD threshold
1882:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          PVDO          LL_PWR_IsActiveFlag_PVDO
1883:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1884:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1885:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_PVDO(void)
1886:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1887:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_PVDO) == (PWR_SR2_PVDO)) ? 1UL : 0UL);
1888:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1889:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1890:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1891:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Indicate whether supply voltage is below radio operating level.
1892:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          RFEOLF        LL_PWR_IsActiveFlag_RFEOL
1893:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1894:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1895:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFEOL(void)
1896:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1897:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_RFEOLF) == (PWR_SR2_RFEOLF)) ? 1UL : 0UL);
1898:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1899:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1900:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1901:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Indicate whether the regulator reached the selected voltage level
1902:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Regulator voltage level is selected using function
1903:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @ref LL_PWR_SetRegulVoltageScaling().
1904:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
1905:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1906:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1907:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
1908:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1909:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
1910:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1911:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1912:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1913:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get wake-up power voltage detection flag
1914:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR1          WPVD          LL_PWR_IsActiveFlag_WPVD
1915:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1916:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1917:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_WPVD(void)
1918:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1919:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WPVDF) == (PWR_SR1_WPVDF)) ? 1UL : 0UL);
1920:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1921:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1922:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1923:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Clear wake-up power voltage detection flag
1924:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SCR          CWPVD         LL_PWR_ClearFlag_WPVD
1925:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1926:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1927:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_WPVD(void)
1928:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1929:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWPVDF);
1930:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1931:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1932:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1933:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get main LDO ready flag
1934:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          LDORDY        LL_PWR_IsActiveFlag_LDORDY
1935:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 38


1936:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1937:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_LDORDY(void)
1938:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1939:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_LDORDY) == (PWR_SR2_LDORDY)) ? 1UL : 0UL);
1940:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1941:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1942:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1943:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Indicate whether the regulator is ready in main mode or is in low-power mode
1944:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Return value "0" means the main regulator is ready and used. Return value "1" means the
1945:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          REGLPF        LL_PWR_IsActiveFlag_REGLPF
1946:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1947:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1948:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_REGLPF(void)
1949:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1950:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_REGLPF) == (PWR_SR2_REGLPF)) ? 1UL : 0UL);
1951:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1952:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1953:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1954:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Indicate whether the low-power regulator is ready after a power-on
1955:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         reset, Standby or Shutdown mode.
1956:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   If the Standby mode is entered while REGLPS bit is still
1957:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         cleared (i.e. backup SRAM2 disabled), the wakeup time
1958:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         from Standby mode may be increased.
1959:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Take care, return value "0" means the regulator is ready. Return value "1" means the ou
1960:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          REGLPS        LL_PWR_IsActiveFlag_REGLPS
1961:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1962:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1963:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_REGLPS(void)
1964:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1965:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_REGLPS) == (PWR_SR2_REGLPS)) ? 1UL : 0UL);
1966:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1967:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1968:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1969:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Indicate whether the main regulator is supplied from the LDO or SMPS
1970:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         or directly supplied from VDD.
1971:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Return value "0" for main regulator supplied directly from VDD, return value "1" for ma
1972:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          REGMRS        LL_PWR_IsActiveFlag_REGMRS
1973:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1974:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1975:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_REGMRS(void)
1976:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1977:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_REGMRS) == (PWR_SR2_REGMRS)) ? 1UL : 0UL);
1978:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1979:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1980:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1981:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Indicate whether the flash memory is ready
1982:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          FLASHRDY      LL_PWR_IsActiveFlag_FLASHRDY
1983:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1984:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1985:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_FLASHRDY(void)
1986:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1987:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_FLASHRDY) == (PWR_SR2_FLASHRDY)) ? 1UL : 0UL);
1988:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1989:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1990:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1991:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
1992:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 39


1993:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1994:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_FLAG_Management_SMPS FLAG management for SMPS
1995:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
1996:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1997:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1998:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1999:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get SMPS ready flag
2000:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR1          SMPSRDY       LL_PWR_IsActiveFlag_SMPSRDY
2001:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2002:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2003:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_SMPSRDY(void)
2004:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2005:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) == (PWR_SR2_SMPSRDY)) ? 1UL : 0UL);
2006:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2007:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2008:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2009:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
2010:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2011:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2012:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_FLAG_Management_Radio FLAG management for radio
2013:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
2014:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2015:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2016:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2017:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get radio busy flag (triggered status: wake-up event
2018:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         or interruption occurred at least once. Can be cleared by software).
2019:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   This radio busy triggered status is based on radio busy masked
2020:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         signal.
2021:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         To get radio busy masked signal current status, use function
2022:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @ref LL_PWR_IsActiveFlag_RFBUSYMS()
2023:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR1          RFBUSYF       LL_PWR_IsActiveFlag_RFBUSY
2024:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2025:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2026:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSY(void)
2027:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2028:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WRFBUSYF) == (PWR_SR1_WRFBUSYF)) ? 1UL : 0UL);
2029:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2030:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2031:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2032:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Clear radio busy flag
2033:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
2034:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
2035:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2036:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
2037:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2038:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
2039:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2040:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2041:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2042:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get radio busy signal flag (current status:
2043:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         set and cleared by hardware reflecting the real time signal level).
2044:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   The get radio busy flag triggered status, use function
2045:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @ref LL_PWR_IsActiveFlag_RFBUSY()
2046:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
2047:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2048:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2049:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 40


2050:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2051:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
2052:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2053:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2054:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2055:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get radio busy masked signal flag (current status:
2056:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         set and cleared by hardware reflecting the real time signal level).
2057:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   The get radio busy flag triggered status, use function
2058:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @ref LL_PWR_IsActiveFlag_RFBUSY()
2059:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
2060:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2061:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2062:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
2063:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2064:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
2065:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2066:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2067:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2068:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
2069:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2070:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2071:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_FLAG_Management_Multicore FLAG management for multicore
2072:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
2073:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2074:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2075:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #if defined(DUAL_CORE)
2076:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2077:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get CPU2 hold interrupt flag
2078:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR1          C2HF          LL_PWR_IsActiveFlag_C2H
2079:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit: 0 or 1 (CPU2 wake-up request and C2BOOT disabled,
2080:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         (except for illegal access wake-up),
2081:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         refer to function @ref LL_PWR_EnableBootC2()).
2082:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2083:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2H(void)
2084:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2085:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_C2HF) == (PWR_SR1_C2HF)) ? 1UL : 0UL);
2086:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2087:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2088:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2089:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get CPU2 boot or wake-up request source information
2090:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          C2BOOTS       LL_PWR_IsActiveFlag_C2BOOTS
2091:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit: 0 (boot from an illegal access event)
2092:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         or 1 (boot from a SW request from function @ref LL_PWR_EnableBootC2()).
2093:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2094:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2BOOTS(void)
2095:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2096:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_C2BOOTS) == (PWR_SR2_C2BOOTS)) ? 1UL : 0UL);
2097:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2098:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #endif
2099:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2100:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2101:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get system Stop 0 or Stop 1 flag for CPU1
2102:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C1STOPF       LL_PWR_IsActiveFlag_C1STOP
2103:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2104:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2105:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C1STOP(void)
2106:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 41


2107:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C1STOPF) == (PWR_EXTSCR_C1STOPF)) ? 1UL : 0UL);
2108:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2109:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2110:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2111:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get system Stop 2 flag for CPU1
2112:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C1STOP2F      LL_PWR_IsActiveFlag_C1STOP2
2113:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2114:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2115:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C1STOP2(void)
2116:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2117:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C1STOP2F) == (PWR_EXTSCR_C1STOP2F)) ? 1UL : 0UL);
2118:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2119:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2120:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2121:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get system Standby flag for CPU1
2122:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C1SBF         LL_PWR_IsActiveFlag_C1SB
2123:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2124:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2125:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C1SB(void)
2126:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2127:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C1SBF) == (PWR_EXTSCR_C1SBF)) ? 1UL : 0UL);
2128:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2129:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2130:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2131:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get deepsleep mode for CPU1
2132:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C1DS          LL_PWR_IsActiveFlag_C1DS
2133:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2134:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2135:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C1DS(void)
2136:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2137:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C1DS) == (PWR_EXTSCR_C1DS)) ? 1UL : 0UL);
2138:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2139:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2140:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #if defined(DUAL_CORE)
2141:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2142:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  System Stop 0 or Stop 1 flag for CPU2
2143:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C2STOPF       LL_PWR_IsActiveFlag_C2STOP
2144:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2145:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2146:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2STOP(void)
2147:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2148:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2STOPF) == (PWR_EXTSCR_C2STOPF)) ? 1UL : 0UL);
2149:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2150:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2151:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2152:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  System Stop 2 flag for CPU2
2153:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C2STOP2F      LL_PWR_IsActiveFlag_C2STOP2
2154:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2155:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2156:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2STOP2(void)
2157:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2158:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2STOP2F) == (PWR_EXTSCR_C2STOP2F)) ? 1UL : 0UL);
2159:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2160:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2161:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2162:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  System Standby flag for CPU2
2163:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 42


2164:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2165:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2166:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
2167:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2168:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
2169:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2170:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2171:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2172:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get deepsleep mode for CPU2
2173:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
2174:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2175:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2176:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
2177:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2178:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
2179:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2180:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2181:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2182:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Clear CPU2 hold interrupt flag
2183:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SCR          CC2HF         LL_PWR_ClearFlag_C2H
2184:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
2185:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2186:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_C2H(void)
2187:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2188:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CC2HF);
2189:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2190:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #endif
2191:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2192:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2193:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Clear standby and stop flags for CPU1
2194:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
2195:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
2196:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2197:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
  81              		.loc 2 2197 22 view .LVU7
  82              	.LBB5:
2198:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2199:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
  83              		.loc 2 2199 3 view .LVU8
  84 0006 0120     		movs	r0, #1
  85 0008 024B     		ldr	r3, .L5
  86 000a C3F88800 		str	r0, [r3, #136]
  87              	.LBE5:
  88              	.LBE4:
 100:Core/Src/stm32_lpm_if.c **** 
 101:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterStopMode_2 */
 102:Core/Src/stm32_lpm_if.c **** 
 103:Core/Src/stm32_lpm_if.c ****   /* USER CODE END EnterStopMode_2 */
 104:Core/Src/stm32_lpm_if.c ****   HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
  89              		.loc 1 104 3 view .LVU9
  90 000e FFF7FEFF 		bl	HAL_PWREx_EnterSTOP2Mode
  91              	.LVL1:
 105:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterStopMode_3 */
 106:Core/Src/stm32_lpm_if.c **** 
 107:Core/Src/stm32_lpm_if.c ****   /* USER CODE END EnterStopMode_3 */
 108:Core/Src/stm32_lpm_if.c **** }
  92              		.loc 1 108 1 is_stmt 0 view .LVU10
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 43


  93 0012 08BD     		pop	{r3, pc}
  94              	.L6:
  95              		.align	2
  96              	.L5:
  97 0014 00040058 		.word	1476396032
  98              		.cfi_endproc
  99              	.LFE993:
 101              		.section	.text.PWR_ExitSleepMode,"ax",%progbits
 102              		.align	1
 103              		.global	PWR_ExitSleepMode
 104              		.syntax unified
 105              		.thumb
 106              		.thumb_func
 108              	PWR_ExitSleepMode:
 109              	.LFB996:
 109:Core/Src/stm32_lpm_if.c **** 
 110:Core/Src/stm32_lpm_if.c **** void PWR_ExitStopMode(void)
 111:Core/Src/stm32_lpm_if.c **** {
 112:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN ExitStopMode_1 */
 113:Core/Src/stm32_lpm_if.c **** 
 114:Core/Src/stm32_lpm_if.c ****   /* USER CODE END ExitStopMode_1 */
 115:Core/Src/stm32_lpm_if.c ****   /* Resume sysTick : work around for debugger problem in dual core */
 116:Core/Src/stm32_lpm_if.c ****   HAL_ResumeTick();
 117:Core/Src/stm32_lpm_if.c ****   /*Not retained periph:
 118:Core/Src/stm32_lpm_if.c ****     ADC interface
 119:Core/Src/stm32_lpm_if.c ****     DAC interface USARTx, TIMx, i2Cx, SPIx
 120:Core/Src/stm32_lpm_if.c ****     SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */
 121:Core/Src/stm32_lpm_if.c **** 
 122:Core/Src/stm32_lpm_if.c ****   /* Resume not retained USARTx and DMA */
 123:Core/Src/stm32_lpm_if.c ****   vcom_Resume();
 124:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN ExitStopMode_2 */
 125:Core/Src/stm32_lpm_if.c **** 
 126:Core/Src/stm32_lpm_if.c ****   /* USER CODE END ExitStopMode_2 */
 127:Core/Src/stm32_lpm_if.c **** }
 128:Core/Src/stm32_lpm_if.c **** 
 129:Core/Src/stm32_lpm_if.c **** void PWR_EnterSleepMode(void)
 130:Core/Src/stm32_lpm_if.c **** {
 131:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterSleepMode_1 */
 132:Core/Src/stm32_lpm_if.c **** 
 133:Core/Src/stm32_lpm_if.c ****   /* USER CODE END EnterSleepMode_1 */
 134:Core/Src/stm32_lpm_if.c ****   /* Suspend sysTick */
 135:Core/Src/stm32_lpm_if.c ****   HAL_SuspendTick();
 136:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterSleepMode_2 */
 137:Core/Src/stm32_lpm_if.c **** 
 138:Core/Src/stm32_lpm_if.c ****   /* USER CODE END EnterSleepMode_2 */
 139:Core/Src/stm32_lpm_if.c ****   HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 140:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterSleepMode_3 */
 141:Core/Src/stm32_lpm_if.c **** 
 142:Core/Src/stm32_lpm_if.c ****   /* USER CODE END EnterSleepMode_3 */
 143:Core/Src/stm32_lpm_if.c **** }
 144:Core/Src/stm32_lpm_if.c **** 
 145:Core/Src/stm32_lpm_if.c **** void PWR_ExitSleepMode(void)
 146:Core/Src/stm32_lpm_if.c **** {
 110              		.loc 1 146 1 is_stmt 1 view -0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 44


 114 0000 08B5     		push	{r3, lr}
 115              	.LCFI1:
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 3, -8
 118              		.cfi_offset 14, -4
 147:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN ExitSleepMode_1 */
 148:Core/Src/stm32_lpm_if.c **** 
 149:Core/Src/stm32_lpm_if.c ****   /* USER CODE END ExitSleepMode_1 */
 150:Core/Src/stm32_lpm_if.c ****   /* Suspend sysTick */
 151:Core/Src/stm32_lpm_if.c ****   HAL_ResumeTick();
 119              		.loc 1 151 3 view .LVU12
 120 0002 FFF7FEFF 		bl	HAL_ResumeTick
 121              	.LVL2:
 152:Core/Src/stm32_lpm_if.c **** 
 153:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN ExitSleepMode_2 */
 154:Core/Src/stm32_lpm_if.c **** 
 155:Core/Src/stm32_lpm_if.c ****   /* USER CODE END ExitSleepMode_2 */
 156:Core/Src/stm32_lpm_if.c **** }
 122              		.loc 1 156 1 is_stmt 0 view .LVU13
 123 0006 08BD     		pop	{r3, pc}
 124              		.cfi_endproc
 125              	.LFE996:
 127              		.section	.text.PWR_ExitStopMode,"ax",%progbits
 128              		.align	1
 129              		.global	PWR_ExitStopMode
 130              		.syntax unified
 131              		.thumb
 132              		.thumb_func
 134              	PWR_ExitStopMode:
 135              	.LFB994:
 111:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN ExitStopMode_1 */
 136              		.loc 1 111 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140 0000 08B5     		push	{r3, lr}
 141              	.LCFI2:
 142              		.cfi_def_cfa_offset 8
 143              		.cfi_offset 3, -8
 144              		.cfi_offset 14, -4
 116:Core/Src/stm32_lpm_if.c ****   /*Not retained periph:
 145              		.loc 1 116 3 view .LVU15
 146 0002 FFF7FEFF 		bl	HAL_ResumeTick
 147              	.LVL3:
 123:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN ExitStopMode_2 */
 148              		.loc 1 123 3 view .LVU16
 149 0006 FFF7FEFF 		bl	vcom_Resume
 150              	.LVL4:
 127:Core/Src/stm32_lpm_if.c **** 
 151              		.loc 1 127 1 is_stmt 0 view .LVU17
 152 000a 08BD     		pop	{r3, pc}
 153              		.cfi_endproc
 154              	.LFE994:
 156              		.section	.text.PWR_EnterSleepMode,"ax",%progbits
 157              		.align	1
 158              		.global	PWR_EnterSleepMode
 159              		.syntax unified
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 45


 160              		.thumb
 161              		.thumb_func
 163              	PWR_EnterSleepMode:
 164              	.LFB995:
 130:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterSleepMode_1 */
 165              		.loc 1 130 1 is_stmt 1 view -0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169 0000 08B5     		push	{r3, lr}
 170              	.LCFI3:
 171              		.cfi_def_cfa_offset 8
 172              		.cfi_offset 3, -8
 173              		.cfi_offset 14, -4
 135:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterSleepMode_2 */
 174              		.loc 1 135 3 view .LVU19
 175 0002 FFF7FEFF 		bl	HAL_SuspendTick
 176              	.LVL5:
 139:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterSleepMode_3 */
 177              		.loc 1 139 3 view .LVU20
 178 0006 0121     		movs	r1, #1
 179 0008 0020     		movs	r0, #0
 180 000a FFF7FEFF 		bl	HAL_PWR_EnterSLEEPMode
 181              	.LVL6:
 143:Core/Src/stm32_lpm_if.c **** 
 182              		.loc 1 143 1 is_stmt 0 view .LVU21
 183 000e 08BD     		pop	{r3, pc}
 184              		.cfi_endproc
 185              	.LFE995:
 187              		.global	UTIL_PowerDriver
 188              		.section	.rodata.UTIL_PowerDriver,"a"
 189              		.align	2
 192              	UTIL_PowerDriver:
 193 0000 00000000 		.word	PWR_EnterSleepMode
 194 0004 00000000 		.word	PWR_ExitSleepMode
 195 0008 00000000 		.word	PWR_EnterStopMode
 196 000c 00000000 		.word	PWR_ExitStopMode
 197 0010 00000000 		.word	PWR_EnterOffMode
 198 0014 00000000 		.word	PWR_ExitOffMode
 199              		.text
 200              	.Letext0:
 201              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 202              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 203              		.file 5 "Drivers/CMSIS/Device/ST/STM32WLxx/Include/stm32wle5xx.h"
 204              		.file 6 "Utilities/lpm/tiny_lpm/stm32_lpm.h"
 205              		.file 7 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal.h"
 206              		.file 8 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_pwr.h"
 207              		.file 9 "Core/Inc/usart_if.h"
 208              		.file 10 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_pwr_ex.h"
 209              		.file 11 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_dma.h"
ARM GAS  C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s 			page 46


DEFINED SYMBOLS
                            *ABS*:00000000 stm32_lpm_if.c
C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s:18     .text.PWR_EnterOffMode:00000000 $t
C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s:24     .text.PWR_EnterOffMode:00000000 PWR_EnterOffMode
C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s:38     .text.PWR_ExitOffMode:00000000 $t
C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s:44     .text.PWR_ExitOffMode:00000000 PWR_ExitOffMode
C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s:57     .text.PWR_EnterStopMode:00000000 $t
C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s:63     .text.PWR_EnterStopMode:00000000 PWR_EnterStopMode
C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s:97     .text.PWR_EnterStopMode:00000014 $d
C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s:102    .text.PWR_ExitSleepMode:00000000 $t
C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s:108    .text.PWR_ExitSleepMode:00000000 PWR_ExitSleepMode
C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s:128    .text.PWR_ExitStopMode:00000000 $t
C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s:134    .text.PWR_ExitStopMode:00000000 PWR_ExitStopMode
C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s:157    .text.PWR_EnterSleepMode:00000000 $t
C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s:163    .text.PWR_EnterSleepMode:00000000 PWR_EnterSleepMode
C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s:192    .rodata.UTIL_PowerDriver:00000000 UTIL_PowerDriver
C:\Users\NATHAN~1\AppData\Local\Temp\ccBpsrAb.s:189    .rodata.UTIL_PowerDriver:00000000 $d

UNDEFINED SYMBOLS
HAL_SuspendTick
HAL_PWREx_EnterSTOP2Mode
HAL_ResumeTick
vcom_Resume
HAL_PWR_EnterSLEEPMode
